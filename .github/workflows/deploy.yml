name: Deploy Spring Boot Application to AWS EC2

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest


    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for Gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/spring-boot-app:latest -f docker/Dockerfile .

      - name: Push Docker Image to Docker Hub
        run: docker push ${{ secrets.DOCKER_HUB_USERNAME }}/spring-boot-app:latest

  deploy:
    name: Deploy to EC2
    runs-on: self-hosted
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          ssh -i tkadprokey.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Update package manager
            sudo yum update -y

            # Install Docker Compose
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

            # Make the binary executable
            sudo chmod +x /usr/local/bin/docker-compose

            # Verify installation
            docker-compose --version
          EOF

      - name: Add SSH Key to Agent
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > tkadprokey.pem
          chmod 600 tkadprokey.pem
          eval "$(ssh-agent -s)"
          ssh-add tkadprokey.pem

      - name: Create directories and .env file on EC2
        run: |
          ssh -i tkadprokey.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'

            mkdir -p ~/app/docker/prometheus
            mkdir -p ~/app/docker/grafana/dashboards
            mkdir -p ~/app/docker/grafana/provisioning/datasources
            mkdir -p ~/app/docker/grafana/provisioning/dashboards
          
            # Create .env file with secrets
            cat > ~/app/.env << EOL
          DB_URL=${{ secrets.DB_URL }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USERNAME=${{ secrets.DB_USERNAME }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PARAMS=${{ secrets.DB_PARAMS }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
          EOL
          
            chmod 600 ~/app/.env
          EOF

      - name: List files
        run: |
          pwd
          ls -R

      - name: Copy configuration files
        run: |
          scp -i tkadprokey.pem -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app/
          scp -i tkadprokey.pem -o StrictHostKeyChecking=no docker/prometheus/prometheus.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app/docker/prometheus/
          scp -i tkadprokey.pem -o StrictHostKeyChecking=no docker/grafana/provisioning/datasources/prometheus.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app/docker/grafana/provisioning/datasources/
          scp -i tkadprokey.pem -o StrictHostKeyChecking=no docker/grafana/provisioning/dashboards/dashboard.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app/docker/grafana/provisioning/dashboards/
          scp -i tkadprokey.pem -o StrictHostKeyChecking=no docker/grafana/dashboards/spring-boot-dashboard.json ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/app/docker/grafana/dashboards/

      - name: Deploy Application
        run: |
          ssh -i tkadprokey.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            cd ~/app
            docker-compose pull
            docker-compose down
            docker-compose up -d
          EOF

      - name: Cleanup
        run: rm -f tkadprokey.pem